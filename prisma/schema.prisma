// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id            String    @id @default(cuid())
  userId        String    @unique
  name          String
  email         String
  profession    String?
  batch         String?
  about         String?
  profileImage  String?
  phone         String?
  linkedin      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  education     Education[]
  experience    Experience[]
  skills        Skill[]
  projects      Project[]
}

model Education {
  id            String    @id @default(cuid())
  institution   String
  degree        String
  field         String
  startDate     DateTime
  endDate       DateTime?
  description   String?
  profile       Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId     String
}

model Experience {
  id            String    @id @default(cuid())
  company       String
  position      String
  startDate     DateTime
  endDate       DateTime?
  description   String?
  profile       Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId     String
}

model Skill {
  id            String    @id @default(cuid())
  name          String
  level         Int       @default(0) // 0-100
  profile       Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId     String
}

model Project {
  id            String    @id @default(cuid())
  name          String
  description   String?
  githubLink    String?
  images        ProjectImage[]
  profile       Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId     String
}

model ProjectImage {
  id            String    @id @default(cuid())
  url           String
  project       Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId     String
}

